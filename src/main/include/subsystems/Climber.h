// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
#pragma once

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include <frc2/command/SubsystemBase.h>
#include "rev/CANSparkMax.h"
#include <frc/DigitalInput.h>
#include <frc/DoubleSolenoid.h>
#include <frc/PneumaticsModuleType.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author ExampleAuthor
 */
class Climber: public frc2::SubsystemBase {
private:
    int climbStage;
    int count = 0;
    double target = 10; // will be repleaced with actual position
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
frc::DigitalInput m_levelLimit{5};
frc::DigitalInput m_lockLimit{1};
frc::DigitalInput m_reachLimit2{4};
frc::DigitalInput m_reachLimit1{0};
frc::DoubleSolenoid m_heightSolenoid{0, frc::PneumaticsModuleType::CTREPCM, 6, 7};
frc::DoubleSolenoid m_lockSolenoid{0, frc::PneumaticsModuleType::CTREPCM, 4, 5};
frc::DoubleSolenoid m_reachSolenoid{0, frc::PneumaticsModuleType::CTREPCM, 2, 3};
rev::CANSparkMax m_followMotor{9, rev::CANSparkMax::MotorType::kBrushless};
rev::CANSparkMax m_leaderMotor{10, rev::CANSparkMax::MotorType::kBrushless};
rev::SparkMaxPIDController m_climberPidController = m_leaderMotor.GetPIDController();
rev::SparkMaxRelativeEncoder m_climberEncoder = m_leaderMotor.GetEncoder();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
Climber();

    void Periodic() override;
    void SimulationPeriodic() override;
    void SetClimberPower(double pwr);
    bool CalibrateClimber();
    void SetClimberPosition(double position);

    void ExtendReachingArm();
    void ExtractReachingArm();

    void Lock();
    void Unlock();

    void LiftClimber();
    void LowerClimber();

    void Climb();




    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS




};

